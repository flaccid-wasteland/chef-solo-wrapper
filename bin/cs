#!/usr/bin/ruby

# chef-solo-wrapper (cs)
#
# Copyright 2011, Chris Fordham
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'rubygems'
require 'trollop'
require 'json'
require 'yaml'

CHEF_SOLO_WRAPPER_VERSION = '0.0.15'
COOKBOOKS_SRC_DEST = '/usr/src/chef-cookbooks'

opts = Trollop::options do
	version 'chef-solo-wrapper '+CHEF_SOLO_WRAPPER_VERSION+' (c) 2011 Chris Fordham'
	banner <<-EOS
A CLI wrapper for Chef Solo w/ RightScale integration.

Usage:
       cs [options]
where [options] are:
EOS
  opt :server,    "Use attribute data from a RightScale server by nickname or ID.",       :short => "-s", :type => String                       # flag --server, default false
  opt :template,  "Use attribute data from a RightScale ServerTemplate by nickname or ID.", :type => String                                     # flag --template, default false
  opt :sandbox,   "Use the Ruby environment in the local RightLink sandbox."                                                                    # flag --sandbox, default false
  opt :config,    "Use alternate Chef Solo configuration (default used, ~/solo.rb.)",     :short => "-c"                                        # flag --config, default false
  opt :json,      "Use alternate Chef Solo JSON data (default used, ~/node.json.)",       :short => "-j", :type => String                       # flag --json, default false
  opt :test,      "Tests requiring chef only plus implies a dry run",                     :short => "-t"                                        # flag --test, default false
  opt :setup,     "Installs the Chef Rubygem.",                                           :type => String                                       # flag --test, default false
  opt :install,   "Installs tools such as Git.",                                          :type => String                                       # flag --test, default false
  opt :defaults,  "Setups up configuration for default/initial.",                         :default => false                                     # flag --test, default false
  opt :fetch,     "Fetches cookbooks.",                                                   :short => "-f", :type => String                       # flag --fetch, default false
  opt :dry,       "Dry run only, don't run chef-solo.",                                   :short => "-d", :default => false                     # flag --dry, default false
  opt :run,       "Use alernative run_list for chef-solo run.",                           :short => "-r", :type => String                       # flag --run, default false
  opt :env,       "Environment variables to start with e.g. for input values.",           :short => "-e", :type => String
  opt :write,     "Write back to local JSON file.",                                       :short => "-w"                                        # flag --write, default false
  opt :loglevel,  "The Chef log level to use: debug, info, warn, error, fatal",           :short => "-l", :default => "info", :type => String   # flag --loglevel, default info
  opt :verbose,   "Verbose mode.",                                                        :short => "-v"                                        # flag --verbose, default false
  opt :debug,     "Debug mode.",                                                          :default => false                                     # flag --debug, default false
  opt :quiet,     "Quiet mode.",                                                          :default => false                                     # flag --quiet, default false
  opt :archive,   "Checkout cookbooks in archive mode."                                                                                         # flag --archive, default false
  opt :help, 	    "Print usage info and exit.",                                       	  :short => "-h"
end
puts "chef-solo-wrapper #{CHEF_SOLO_WRAPPER_VERSION}\n" unless opts[:quiet]

if opts[:defaults]
  SETUP_DEFAULTS = true
else
  SETUP_DEFAULTS = false
end

if opts[:debug]
  DEBUG = true
  log_level = 'debug'
elsif opts[:verbose]
  log_level = 'verbose' unless opts[:debug]
  DEBUG = false
else
  log_level = 'info'
  DEBUG = false
end

solo = false
server = false
rs_home = File.expand_path('~')+'/.rightscale'
env_file = rs_home+'/chef_env.sh'
json_file = '/etc/chef/node.json'
solo_file = '/etc/chef/solo.rb'

require File.join(File.dirname(__FILE__), '../lib/chef_solo_wrapper.rb')
require File.join(File.dirname(__FILE__), "../lib/easy_logger.rb")
require File.join(File.dirname(__FILE__), '../lib/config_helper.rb')
require File.join(File.dirname(__FILE__), "../lib/cookbooks_fetcher.rb")

logger = EasyLogger.new(log_level.to_s)
config = ConfigHelper.new(SETUP_DEFAULTS, DEBUG, log_level)

logger.log "cli_options: #{opts.to_json}", 'verbose'
puts "options: #{opts.to_json}" if opts[:help]
 
# env/inputs
if opts[:env]
  logger.log("--env: #{opts[:env]}", 'debug')
  
  pairs = opts[:env].split(' ')
  vars = Hash.new
  Dir.mkdir(rs_home) unless File.exists?(rs_home)

  # store each key/value pair
  fh = File.new(env_file, "w")
  pairs.each { |pair|
    var = "#{pair.split('=')[0]}"
    val = "#{pair.split('=')[1]}"
    fh.write pair
    vars[var] = val
  }
  fh.close
  
  logger.log "Environment variables: #{vars.to_json}", [ 'verbose', 'debug' ]
  # merge the chef env with ENV
  logger.log "Merging environment variables.", 'debug'
  CS_ENV = vars.merge(ENV)
  logger.log "Cumulative Environment: #{CS_ENV.inspect}", 'debug'
else
  CS_ENV = {}
end

# Test mode (exits after test)
if opts[:test]
  config.test_setup
  exit
end

# Install tools routines
if opts[:install]
  case opts[:install]
  when 'git'
    # requires chef
    system('rm -Rf /usr/src/git*; rm -Rf /usr/src/chef-cookbooks/git*')
    logger.log "[wget] Fetching git cookbook from GitHub..."
    fetch_cmd = "mkdir -p /usr/src/chef-cookbooks && wget --no-check-certificate https://github.com/opscode-cookbooks/git/tarball/master -O /usr/src/git_cookbook.tar 2>&1 && cd /usr/src && tar zxvf /usr/src/git_cookbook.tar && mv -v /usr/src/opscode-cookbooks-git-* /usr/src/chef-cookbooks/git"
    install = "[git_install] " + `#{fetch_cmd}`; result=$?.success?
    if result
      logger.log install, 'verbose'
    else
      logger.log install, 'error'
      raise "Failed to fetch the git cookbook from GitHub!"
    end
    File.open('/etc/chef/install_git.json', "w") {|f| f.write '{ "run_list": [ "recipe[git::default]" ] }' }
    File.open('/etc/chef/install_git_solo.rb', "w") {|f| f.write 'file_cache_path "/var/chef-solo"'+"\n"+'cookbook_path [ "/usr/src/chef-cookbooks" ]'+"\n"'json_attribs "/etc/chef/node.json"'+"\n"}
    system("chef-solo -c /etc/chef/install_git_solo.rb -j /etc/chef/install_git.json")
  when 'java'
    # requires chef
    system('rm -Rf /usr/src/java*; rm -Rf /usr/src/chef-cookbooks/java*')
    logger.log "[wget] Fetching java cookbook from GitHub..."
    fetch_cmd = "mkdir -p /usr/src/chef-cookbooks && wget --no-check-certificate https://github.com/opscode-cookbooks/java/tarball/master -O /usr/src/java_cookbook.tar 2>&1 && cd /usr/src && tar zxvf /usr/src/java_cookbook.tar && mv -v /usr/src/opscode-cookbooks-java-* /usr/src/chef-cookbooks/java"
    install = "[java_install] " + `#{fetch_cmd}`; result=$?.success?
    if result
      logger.log install, 'verbose'
    else
      logger.log install, 'error'
      raise "Failed to fetch the java cookbook from GitHub!"
    end
    File.open(json_file, "w") {|f| f.write '{ "run_list": [ "recipe[java::default]" ] }' }
    File.open(solo_file, "w") {|f| f.write 'file_cache_path "/var/chef-solo"'+"\n"+'cookbook_path [ "/usr/src/chef-cookbooks" ]'+"\n"'json_attribs "/etc/chef/node.json"'+"\n"}
    system("chef-solo -c #{solo_file} -j #{json_file}")
  end
  exit
end

# Setup routines
if opts[:setup]
  case opts[:setup]
    when 'chef'
      config.install_chef
    when 'rc'
      config.install_rest_connection
    when 'config'
      config.setup_solo_rb(solo_file)
    when 'config-sandbox'
      config.setup_solo_rb_sandbox(solo_file)
    when 'config-oss'
      logger.log 'Setting up for OSS (flaccid) cookbooks...', 'verbose'
      fetcher = CookbooksFetcher.new(log_level)
      fetcher.fetch "git://github.com/flaccid/cookbooks_public.git"
      fetcher.fetch "git://github.com/flaccid/cookbooks.git"
      File.open(solo_file, "w") {|f| f.write 'file_cache_path "/var/chef-solo"'+"\n"+'cookbook_path [ "/usr/src/chef-cookbooks/cookbooks_public/cookbooks", "/usr/src/chef-cookbooks/cookbooks/cookbooks" ]'+"\n"'json_attribs "/etc/chef/node.json"'+"\n"}
    when 'node'
      config.setup_node_json(json_file)
    when 'all'
      config.install_chef
      config.install_rest_connection
      config.setup_node_json(json_file)
      config.setup_solo_rb(solo_file)
    when 'show'
      config.show(solo_file, json_file)
      exit
  end
  logger.log "Setup complete."
  exit
end

# Fetch cookbooks option
# e.g. cs --fetch git://github.com/flaccid/cookbooks_public.git
if opts[:fetch]
  require File.join(File.dirname(__FILE__), '../lib/cookbooks_fetcher.rb')
  fetcher = CookbooksFetcher.new(log_level)
  fetcher.fetch opts[:fetch]
  exit
end

config.pre_checks

# get json if available
if opts[:json]
  logger.log "Using provided json: #{opts[:json]}", 'debug'
  attributes = File.new(opts[:json], "r").read
else
  if File.file?(json_file)
    node_file = json_file
    attributes = JSON.parse(File.new(json_file, "r").read)
  elsif File.file?("#{File.expand_path('~')}/node.json")
    node_file = "#{File.expand_path('~')}/node.json"
    attributes = JSON.parse(File.new(node_file, "r").read)
  else
    node_file = "#{File.expand_path('~')}/node.json"
    attributes = JSON.parse("{\n}\n")
  end
  chef_json = " -j #{node_file}"
end

# when a rs server is specified
if opts[:server]
  # import rest_connection
  logger.log 'Importing RestConnection RubyGem.', 'verbose'
  require 'rest_connection'

  # fetch server via rest_connection
  if opts.server.to_i > 0
    logger.log "Finding server: #{opts.server}."
    server = Server.find(opts.server.to_i)
  else
    logger.log "Finding server: '%#{opts.server}%'"
    server = Server.find(:first) { |s| s.nickname =~ /#{opts.server}/ }
  end
  logger.log "Found server, '#{server.nickname}'."
  logger.log server.to_yaml, 'verbose'
  
  # get current instance of server
  server.reload_current
  logger.log JSON.pretty_generate(server.settings), 'debug'

  # assign inputs from server params
  inputs = server.parameters
  logger.log "#{JSON.pretty_generate(inputs)}", 'debug'
  server_attributes = Hash.new
  inputs.each { |input,v|
    if inputs.to_s =~ /^[A-Z]+$/
      logger.log "right_script input #{k} discarded.", 'debug'
    else
      logger.log "#{input} => #{v}", 'debug'
      keys = input.split("/")
      if keys.count == 2
        type = v.split(':')[0] 
        value = v.split(':')[1]
        value = '' unless value != "$ignore"
        if keys[0] != 'rightscale'
          logger.log "node attribute #{keys[1]} detected for cookbook, #{keys[0]}.", 'debug'
          logger.log "attribute:#{keys[0]}[\"#{keys[1]}\"] type:#{type} value:#{value}", 'debug'
          logger.log "[#{keys[0]}][#{keys[1]}] => type: #{type}", 'debug'
          logger.log "[#{keys[0]}][#{keys[1]}] => value: #{value}", 'debug'
          server_attributes["#{keys[0]}"] = {} unless server_attributes["#{keys[0]}"]
          server_attributes["#{keys[0]}"]["#{keys[1]}"] = "#{value}"
        end
      end
    end
  }
  logger.log "\n#{p server_attributes}", 'debug'
elsif opts[:template]
  # steal inputs from ST

  logger.log "Importing rest_connection Rubygem.."
  require 'rest_connection'

  template = false
  
  if opts[:template].to_i > 0
    logger.log "Finding ServerTemplate: #{opts[:template]}"
    template = ServerTemplate.find(opts[:template].to_i)
  else
    logger.log "Finding ServerTemplate: '%#{opts[:template]}%'"
    #puts ServerTemplate.find(:first).inspect; exit
    template = ServerTemplate.find(:first) { |s| s.nickname =~ /"#{opts[:template]}"/ }
  end
  
  if template  
    logger.log "ServerTemplate: #{template.to_yaml}", 'debug'
    executables = template.executables
    recipes = Array.new
    executables.each { |exec|
      if exec['apply'] == 'boot' and exec['recipe']
        logger.log "detected recipe: #{exec['recipe']}", 'debug'
        recipes.push(exec['recipe'])
      end
    }
    logger.log "Recipes array: #{recipes.to_json}", 'debug'
    run_list = "[ #{recipes.map {|element| '"'+"recipe[#{element}]"+'"' }.join(', ')} ]"
    logger.log "Run List from ST: #{run_list}", 'verbose'
    opts[:run] = run_list
    #puts opts[:run]
  else
    logger.log "No template found."
    exit 1
  end
end

# merge attributes
if server_attributes
  puts server_attributes.to_json
  logger.log "Merging attributes.", 'debug'
  attributes = server_attributes.merge(attributes)
else
  logger.log "No server attributes to merge.", 'debug'
end

# override runlist if set
if opts[:run]
  logger.log "Overriding run_list with: #{opts[:run]}", 'verbose'
  attributes['run_list'] = "#{opts[:run]}"
end

if opts[:env]
  # replace any global env vars
  logger.log "Overriding node attributes with any found environment variables.", [ 'verbose', 'debug' ]

  def collect_item_attributes(attribs,needle,path=nil)
    result = {}
    path = {}
    attribs.each do |k, v|
      #puts "recipe[#{k}] attr[#{v}]"
      if v == needle
        #puts "    DEBUG: found value, #{v}"
        result[k] = "#{v}"
      elsif v.is_a? Hash
        #puts 'its a hash'
          collect_item_attributes(attribs[k],needle,path).each do |k, v|  
            result[k] = "#{path}#{v}"
          end
        end
      end
    result
  end

  env_vars = CS_ENV.merge(ENV)
  logger.log "Search env: "+env_vars.to_json, 'debug'
  logger.log "Attributes: "+attributes.to_json , 'debug'

  env_vars.each { |key|
    result = {}
    logger.log "Processing env var: #{key.to_json}", 'debug'
    logger.log "Search attribute values for #{key[0]} to assign #{key[1]}", 'debug'
    result = collect_item_attributes(attributes, "#{key[0]}")
    unless result.empty?
      #puts "result: #{result.to_json}"
      attributes.invert.select{ |k,v|
        att = result.invert[key[0]]
        logger.log "invert[#{result.invert[key[0]]}] key0[#{key[0]}] v[#{v}] k[#{k}] att[#{att}]", 'debug'
        if k[att] == key[0]
          logger.log "Found match for [#{v}] -> [#{result.invert["#{key[0]}"]}] ( [#{k.to_json}] ), updating attributes", 'debug'
          attributes[v][att] = CS_ENV[key[0]]
        else
          logger.log "No match for #{key[0]} under #{v}", 'debug'
        end
      }
    end
  }
end

# Final/new attributes
logger.log "Final attributes: #{attributes.to_json}", 'debug'

# write attributes back to local node.json
if attributes
	node_json = JSON.pretty_generate(attributes)
	logger.log "Node Attributes: \n #{node_json}", 'debug'
	logger.log "Writing attributes to #{json_file}", 'debug'
	begin
	  # open file for write back
	  fh = File.new(json_file, "w")
	  fh.write(node_json)
	  fh.close
	end
end

# debug for final node.json
logger.log "== node.json ==\n#{File.open(json_file, "r").read}\n==", [ 'verbose', 'debug' ]

# pre append options
chef_config = " -c #{opts[:config]}" if opts[:config]
chef_json = " -j #{opts[:json]}" if opts[:json]

# set the chef-solo command depending if rs sandbox
if opts[:sandbox]
  logger.log "Using sandbox ruby/chef.", 'debug'
  cs = '/opt/rightscale/sandbox/bin/ruby /opt/rightscale/sandbox/bin/chef-solo'
else
  cs = 'chef-solo'
end

# build chef solo command
cmd = "#{cs}#{chef_config}#{chef_json} --log_level #{opts.loglevel}"
# prepend env
cmd = "#{File.open(env_file, "r").read.strip} #{cmd}" if opts[:env]

# import chef
logger.log 'Importing Chef RubyGem.', 'verbose'
begin
  require 'chef'
rescue
  logger.log "FATAL: Error requiring chef RubyGem!"
end
 
# prepend sudo if not run as root
if Process.uid != 0 
	logger.log "Non-root user, appending sudo \(#{cmd}\).", 'debug'
	cmd.insert(0, 'sudo ') 
else
  logger.log "User is root.", 'debug'
end

if opts[:dry]
  logger.log "Dry run only, exiting."
  exit
end

# finally, run chef-solo
logger.log 'Starting Chef Solo.'
logger.log "executing cmd[#{cmd}]", 'verbose'
system(cmd)
if $? != 0
  raise 'Chef run failed!'
end